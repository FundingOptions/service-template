# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: {{ cookiecutter.kebab_name }}

plugins:
  - serverless-python-requirements
{%- if cookiecutter.is_web_app.lower() == 'true' %}
  - serverless-certificate-creator
  - serverless-domain-manager
{%- endif %}

provider:
  name: aws
  runtime: python{{ cookiecutter.python_version }}
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  memorySize: 128
  timeout: 30
  role: "${self:custom.deploy-context.execution-role}"
  endpointType: REGIONAL
  {%- if cookiecutter.is_web_app.lower() == 'true' %}
  apiKeys:
    - "${self:service}-${self:provider.stage}"
  {%- endif %}
  tracing:
    {%- if cookiecutter.is_web_app.lower() == 'true' %}
    apiGateway: true
    {%- endif %}
    lambda: true
  {%- if cookiecutter.is_web_app.lower() == 'true' %}
  logs:
    restApi:
      roleManagedExternally: true
      accessLogging: true
      format: >-
        {
        "requestId": "$context.requestId"
        , "xrayTraceId": "$context.xrayTraceId"
        , "ip": "$context.identity.sourceIp"
        , "caller": "$context.identity.caller"
        , "user": "$context.identity.user"
        , "requestTime": "$context.requestTime"
        , "httpMethod": "$context.httpMethod"
        , "resourcePath": "$context.resourcePath"
        , "path": "$context.path"
        , "status": "$context.status"
        , "protocol": "$context.protocol"
        , "responseLatency": "$context.responseLatency"
        }
  apiGateway:
    metrics: true
  {%- endif %}
  tags: &tags
    service: "${self:service}"
    managedBy: serverless
    stage: "${self:provider.stage}"
  stackTags: *tags
  deploymentBucket:
    name: "${self:custom.deploy-context.deploy-bucket}"

  environment:
    APP_NAME: "${self:service}"
    APP_STAGE: "${self:provider.stage}"
    SENTRY_DSN: ""
    XRAY_ENABLED: "${self:provider.tracing.lambda}"

package:
  # This relates to node applications only, where it strips dev dependencies.
  excludeDevDependencies: false

  exclude:
    - '**/*'
  include:
    # Serverless includes everything, then filters afterwards. And it's slow.
    # Cancel out their inclusion of everything for a nice speedup.
    # Also fixes cache busting in some cases.
    - "!./**"
    - './{{ cookiecutter.snake_name }}/**'

custom:
  pythonRequirements:
    dockerizePip: true
  {%- if cookiecutter.is_web_app.lower() == 'true' %}
  app:
    domain: "${self:custom.deploy-context.service-domain}"
  customDomain:
    domainName: "${self:custom.app.domain}"
    certificateName: "${self:custom.app.domain}"
    endpointType: regional
    createRoute53Record: true
    basePath: ""
  customCertificate:
    certificateName: "${self:custom.app.domain}"
    idempotencyToken: "{{ random_ascii_string(12) }}"  # random string, unique to this service
    hostedZoneName: "fundingoptions.com."
    region: ${self:provider.region}
  {%- endif %}

  deploy-context: ${ssm:/aws/reference/secretsmanager/fo-${self:provider.stage}-${self:service}-deploy~true}

functions:
  main:
    {%- if cookiecutter.is_web_app.lower() == 'true' %}
    handler: {{ cookiecutter.snake_name }}.web.lambda_entry.handler
    events:
      - http:
          path: /
          method: ANY
          private: true
      - http:
          path: /{proxy+}
          method: ANY
          private: true
    {%- else -%}
    handler: {{ cookiecutter.snake_name }}.lambda_handler.handler
    {%- endif -%}
