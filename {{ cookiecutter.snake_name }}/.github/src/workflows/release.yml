{% raw -%}
name: Draft Release PR
on:
  push:
    branches:
      - master

runs-on: ubuntu-latest

jobs:
  draft-release:
    steps:
      - uses: actions/checkout@v2
      - name: Build message
        id: message
        run: |
          git fetch --prune --unshallow
          body="$(git log --pretty=format:'- %s' origin/release..origin/master)"
          # escape the body for setting the output
          echo "Got Body: $body"
          body="${body//$'%'/%25}"
          body="${body//$'\n'/%0A}"
          body="${body//$'\r'/%0D}"
          title="Release"
          echo "::set-output name=body::$body"
          echo "::set-output name=title::$title"

      - name: Upsert PR
        uses: actions/github-script@v1
        env:
          PR_TITLE: ${{ steps.message.outputs.title }}
          PR_BODY: ${{ steps.message.outputs.body }}
        with:
          github-token: ${{ secrets.FO_GITHUB_TOKEN }}
          script: |
            let pr_number;
            const title = process.env.PR_TITLE;
            const body = process.env.PR_BODY;
            try {
              response = await github.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                head: "master",
                base: "release",
                draft: true,
              });
              pr_number = response.data.number;
            } catch (e) {
              // PR already exists
              const prs = await github.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
                head: "master",
                base: "release",
              });
              if (prs.data.length !== 1) throw Error("Expected 1 PR to be found");
              pr_number = prs.data[0].number;
              await github.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                title: title,
                body: body,
              });
            }
            await github.pulls.createReviewRequest({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number,
              team_reviewers: ["backend"],
            })
{%- endraw %}
